Source Code:
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sb 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import LabelEncoder, StandardScaler 
from sklearn import metrics 
from sklearn.svm import SVC 
from xgboost import XGBRegressor 
from sklearn.linear_model import LinearRegression
import warnings 
warnings.filterwarnings('ignore')

df = pd.read_csv('calories.csv') 
df.head()

df.shape

df.info()

df.describe()

sb.scatterplot(x='Height', y='Weight', data=df)
plt.show()

features = df.drop(['User_ID', 'Calories'], axis=1)
target = df['Calories'].values
X_train, X_val, Y_train, Y_val = train_test_split(features, target, test_size=0.1, random_state=22)
X_train.shape, X_val.shape

features = df.select_dtypes(include='float').columns

plt.figure(figsize=(15, 10))
num_features = len(features)

for i, col in enumerate(features):
    plt.subplot((num_features + 2) // 3, 3, i + 1)
    sb.histplot(df[col], kde=True)
    plt.title(col)

plt.tight_layout()
plt.show()

df.replace({'male': 0, 'female': 1}, 
		inplace=True) 
df.head() 

plt.figure(figsize=(8, 8)) 
sb.heatmap(df.corr() > 0.9, 
		annot=True, 
		cbar=False) 
plt.show() 

to_remove = ['Weight', 'Duration'] 
df.drop(to_remove, axis=1, inplace=True) 

features = df.drop(['User_ID', 'Calories'], axis=1)
target = df['Calories'].values
X_train, X_val, Y_train, Y_val = train_test_split(features, target, test_size=0.1, random_state=22)
X_train.shape, X_val.shape

# Normalizing the features for stable and fast training. 
scaler = StandardScaler() 
X_train = scaler.fit_transform(X_train) 
X_val = scaler.transform(X_val) 

from sklearn.metrics import mean_absolute_error as mae
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor

# Define the models
models = [
    LinearRegression(),
    SVR(),
    RandomForestRegressor(),
    DecisionTreeRegressor(),
    KNeighborsRegressor()
]

# Train and evaluate each model
for model in models:
    model.fit(X_train, Y_train)
    
    print(f'{model} :')
    
    train_preds = model.predict(X_train)
    print('Training Error:', mae(Y_train, train_preds))
    
    val_preds = model.predict(X_val)
    print('Validation Error:', mae(Y_val, val_preds))
    print()
